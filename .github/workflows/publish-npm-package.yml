name: Release → Build & Publish core

on:
  release:
    types: [published] # runs when a release is published (not just created as a draft)
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g. v1.2.3)"
        required: true
        type: string

concurrency:
  group: publish-core-${{ github.ref }}
  cancel-in-progress: false

jobs:
  publish:
    name: Build & publish to npm
    runs-on: ubuntu-latest
    if: github.event.release.draft == false  &&  github.event.release.prerelease == false

    permissions:
      contents: read
      id-token: write

    environment: production

    env:
      PUBLISH_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NODE_OPTIONS: --max-old-space-size=4096
      REGISTRY_URL: ${{ vars.REGISTRY_URL }}

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: ${{ env.REGISTRY_URL }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Verify package.json version matches release tag
        run: |
          TAG="${GITHUB_REF_NAME#v}"     # strip leading 'v' if present
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Release tag: ${TAG}"
          echo "package.json version: ${PKG_VERSION}"
          if [ "$PKG_VERSION" != "$TAG" ]; then
            echo "❌ Version mismatch. Tag v${TAG} does not match package.json version ${PKG_VERSION}."
            echo "   Fix one of them and republish the release."
            exit 1
          fi

      - name: Install missing build deps
        run: npm i --no-save fast-glob

      - name: Build
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
